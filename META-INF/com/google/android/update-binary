#!/sbin/sh
#
# Copyright (C) 2025-26 https://github.com/Kumar-jy, https://github.com/ArKT-7
#
# Made for Windows Installation on WOA Devices 
#

UPD_ZIP="$3"
UPD_INTERFACE="/proc/self/fd/$2"
UPD_TEMP_FOLDER="/tmp/wininstaller"
IMG_BACKUP_FOLDER="/tmp/wininstaller/backup"
WIN_MOUNT_FOLDER="/tmp/wininstaller/win"
set -o pipefail

ui_print() {
  while [ -n "$1" ]; do
    if [ -n "$UPD_INTERFACE" ] && [ -w "$UPD_INTERFACE" ]; then
      echo "ui_print $1" >> "$UPD_INTERFACE"
        echo "ui_print" >> "$UPD_INTERFACE"
      else
        echo "Warning: UPD_INTERFACE ($UPD_INTERFACE) is not writable" >&2
      fi
    shift
  done
}

current_progress=0.0
aio_progress() {
  if [ $# -ne 2 ]; then
    ui_print "Error: aio_progress expects 2 arguments, got $#"
    ui_print "Usage: aio_progress <target_fraction> <duration_in_seconds>"
    return 1
  fi
  target="$1"
  duration="$2"
  if ! echo "$target" | grep -Eq '^[0-9]+([.][0-9]+)?$'; then
    ui_print "Error: Target value '$target' is not a valid number"
    return 1
  fi
  if ! echo "$duration" | grep -Eq '^[0-9]+([.][0-9]+)?$'; then
    ui_print "Error: Duration value '$duration' is not a valid number"
    return 1
  fi
  delta=$(awk "BEGIN { print $target - $current_progress }")
  echo "progress $delta $duration" >> "$UPD_INTERFACE"
  current_progress=$target
}

package_extract_folder() {
  if [ $# -ne 2 ]; then
    ui_print " Error: package_extract_folder expects 2 arguments, got $#"
    ui_print " Usage: package_extract_folder <src-folder> <dst-folder>"
    return 1
  fi
  local src="$1"
  local dst="$2"
  command -v unzip >/dev/null || { ui_print "Error: unzip not found"; return 1; }
  mkdir -p "$dst"
  unzip -o "$UPD_ZIP" "$src/*" -d "$dst" >/dev/null 2>&1 || {
  ui_print " Failed to extract folder: $src"
  return 1
  }
}

package_extract_file() {
  if [ $# -ne 2 ]; then
    ui_print " Error: package_extract_file expects 2 arguments, got $#"
    ui_print " Usage: package_extract_file <src-file> <dst-file>"
    return 1
  fi
  command -v unzip >/dev/null || { ui_print "Error: unzip not found"; return 1; }
  unzip -p "$UPD_ZIP" "$1" > "$2" || {
  ui_print " Failed to extract $1"
  return 1
  }
}

ui_print_wrapped() {
  local text="$1"
  local width="${2:-43}"
  local prefix
  prefix=$(echo "$text" | sed -E 's/^([[:space:]]*).*/\1/')
  text="${text#"${prefix}"}"
  if [ "${#text}" -le "$width" ]; then
    ui_print "$prefix$text"
    return
  fi
  ui_print "$prefix${text:0:$width}"
  text="${text:$width}"
  while [ "${#text}" -gt "$width" ]; do
    ui_print "$prefix${text:0:$width}"
    text="${text:$width}"
  done

  [ -n "$text" ] && ui_print "$prefix$text"
}

volumekey() {
  while true; do
    getevent -lc 1 2>&1 | grep VOLUME | grep " DOWN" > "$UPD_TEMP_FOLDER/events"
    if grep -q "VOLUMEUP" "$UPD_TEMP_FOLDER/events"; then
      return 0
    elif grep -q "VOLUMEDOWN" "$UPD_TEMP_FOLDER/events"; then
      return 1
    fi
  done
}

navigate_menu() {
  options=("$@")
  count=${#options[@]}
  selection=0
  ui_print "----------------------------------------------------"
  ui_print "  Use Volume up to navigate, Volume down to select. "
  ui_print "----------------------------------------------------"
  while true; do
    ui_print " "
    for i in $(seq 0 $((count - 1))); do
      if [ "$i" -eq "$selection" ]; then
        ui_print "> ${options[i]}"
      else
        ui_print "  ${options[i]}"
      fi
    done
    if volumekey; then
      selection=$(( (selection + 1) % count ))
    else
      ui_print " "
	  ui_print "----------------------------------------------------"
      ui_print " You selected: ${options[selection]}"
      ui_print "----------------------------------------------------"
      break
    fi
  done
}

verify_device() {
  required="$1"
  current="$(getprop ro.product.device)"

  if [ "$current" != "$required" ]; then
    ui_print " "
    ui_print "*---------------------Error!--------------------*"
    ui_print " This script is only for $required devices."
    ui_print " Your device is: $current"
    ui_print " "
    exit 1
  fi
}

round() { awk "BEGIN {print int($1 + 0.5)}"; }

verify_part() {
  ud_path="$path/userdata"

  if [ ! -e "$win_path" ] || [ ! -e "$esp_path" ]; then
    ui_print " "
    ui_print "*---------------------Error!--------------------*"
    ui_print "Required partitions ($win_path and/or $esp_path) do not exist."
    ui_print " "
    exit 1
  fi

  local win_gb=$(awk "BEGIN {print $(blockdev --getsize64 "$win_path") / 1e9}")
  local esp_mb=$(awk "BEGIN {print $(blockdev --getsize64 "$esp_path") / 1e6}")
  local ud_gb=$(awk "BEGIN {print $(blockdev --getsize64 "$ud_path") / 1e9}")

  local win_r=$(round "$win_gb")
  local esp_r=$(round "$esp_mb")
  local ud_r=$(round "$ud_gb")

  ui_print "              Userdata Size: ${ud_r}GB"
  ui_print "                ESP Size: ${esp_r}MB"
  ui_print "               Windows Size: ${win_r}GB"

  if [ "$win_r" -ge "$win_min_size" ] && [ "$esp_r" -ge "$esp_min_size" ]; then
    ui_print "*      Partition size meets requirements.       *"
  else
    ui_print " "
    #ui_print "*----------------------Note!---------------------*"
    ui_print "*---------------------Error!--------------------*"
    ui_print "*   Partition size doesn't meet requirements.   *"
    ui_print "At least ${win_min_size}GB for $win and ${esp_min_size}MB for $esp are required."
    ui_print " "
    exit 1
  fi
}

run_gdisk() {
  local DEVICE=$1
  "$UPD_TEMP_FOLDER/gdisk" "$DEVICE" <<EOF
x
j

k

w
Y
EOF
}

verify_battery() {
  if [ "$current_battery_level" -le "$min_required_battery" ]; then
    #ui_print "*----------------------Note!---------------------*"
    ui_print "*---------------------Error!--------------------*"
    ui_print "        Battery is below $min_required_battery%, exiting..."
    ui_print " "
    exit 1
  else
    ui_print "      Battery percentage is sufficient: $current_battery_level%"
  fi
}

is_windows_installed() {
  umount "$win_path"
  mount.ntfs "$win_path" "$WIN_MOUNT_FOLDER" || { ui_print "Failed to mount $win_path"; return 1; }
  if [ -f "$WIN_MOUNT_FOLDER/Windows/explorer.exe" ]; then
    return 0
  else
    return 1
  fi
}

is_partition_rw() { touch "$WIN_MOUNT_FOLDER/rw_test" 2>/dev/null && rm "$WIN_MOUNT_FOLDER/rw_test"; }

backup_partitions() {
  slot=$(getprop ro.boot.slot_suffix)
  for part in "$@"; do
    if [[ "$part" == "boot" || "$part" == "dtbo" || "$part" == "vendor_boot" ]]; then
      if [ -n "$slot" ] && [ -e "$path/${part}${slot}" ]; then
        part="${part}${slot}"
      fi
    fi

    if [ -e "$path/$part" ]; then
      dd if="$path/$part" of="$IMG_BACKUP_FOLDER/$part.img" bs=8M
    fi
  done
  for j in /sdcard /external_sd/WOA /usbstorage/WOA /usb_otg/WOA; do
    mkdir -p "$j/backup"
    cp -r -n "$IMG_BACKUP_FOLDER" "$j"
  done
}

win_esd_search() {
  for depth in "-maxdepth 1" ""; do
    for dir in /sdcard/Download /external_sd/WOA /usbstorage/WOA /usb_otg/WOA \
               /sdcard /external_sd /usbstorage /usb_otg; do
      WIN_IMAGE=$(find "$dir" $depth -type f \( -iname "*.esd" -o -iname "*.wim" \) \
                  ! -path "*/Android/*" 2>/dev/null | head -n 1)
      [ -n "$WIN_IMAGE" ] && { ui_print_wrapped "   Found: $WIN_IMAGE"; return 0; }
    done
  done
  ui_print " "
  #ui_print "*----------------------Note!---------------------*"
  ui_print "*---------------------Error!--------------------*"
  ui_print "    Windows image file (ESD or WIM) not found     "
  ui_print " "
  umount "$win_path"
  exit 1
}

find_index() {
  local wim_info_path="$UPD_TEMP_FOLDER/wim_info.txt"
  "$UPD_TEMP_FOLDER/wimlib-imagex" info "$WIN_IMAGE" > "$wim_info_path" 2>/dev/null
  for EDITION in "${WINDOWS_EDITIONS[@]}"; do 
  INDEX=$(grep -B 1 "$EDITION" "$wim_info_path" | awk '/Index/ {print $2; exit}')
    if [[ -n "$INDEX" ]]; then
      SELECTED_INDEX="$INDEX"
      SELECTED_EDITION="$EDITION"
      ui_print_wrapped "   $SELECTED_EDITION found at Index No $SELECTED_INDEX "
      return 0
    fi
  done
  ui_print " "
  #i_print "*----------------------Note!---------------------*"
  ui_print "*---------------------Error!--------------------*"
  ui_print " No matching Windows edition found in $WIN_IMAGE"
  ui_print " "
  umount "$win_path"
  exit 1
}

format_win() {
  umount "$win_path"
  mkfs.ntfs -f "$win_path" -L "$win_part_name"
}
# might be better to combile both funtion to smth like setup_bin
setup_gdisk() {
  package_extract_file "META-INF/com/bin/gdisk" "$UPD_TEMP_FOLDER/gdisk"
  chmod 0777 "$UPD_TEMP_FOLDER/gdisk"
}

setup_wimlib() {
  package_extract_file "META-INF/com/bin/wimlib-imagex" "$UPD_TEMP_FOLDER/wimlib-imagex"
  chmod 0777 "$UPD_TEMP_FOLDER/wimlib-imagex"
}
# may be good but take some seconds more to extract
rm -rf "$UPD_TEMP_FOLDER"
mkdir -p "$UPD_TEMP_FOLDER"
mkdir -p "$IMG_BACKUP_FOLDER"
mkdir -p "$WIN_MOUNT_FOLDER"

package_extract_file "META-INF/com/google/android/updater-script" "$UPD_TEMP_FOLDER/updater-script" || {
    ui_print "Cannot extract updater-script. Do you have it in package?"
    exit 1
}
chmod 777 "$UPD_TEMP_FOLDER/updater-script"

# Source the updater-script (Only if it's a valid shell script)
if grep -q "^#!/" "$UPD_TEMP_FOLDER/updater-script"; then
    . "$UPD_TEMP_FOLDER/updater-script" "$@"
else
    ui_print "Error: updater-script is not a shell script"
    exit 1
fi
exit $?