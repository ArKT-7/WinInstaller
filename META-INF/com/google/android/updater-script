#!/sbin/bash
#
# Copyright (C) 2023-24 https://github.com/Kumar-Jy
#
# Made for WINDOWS Installation on ........ 
#
if [ "$(getprop ro.product.device)" != "....." ]; then 
ui_print "This script is only for ..... devices."
ui_print "Your device is $(getprop ro.product.device)." 
exit 1
fi
path="/dev/block/by-name"
WINNAME="WINVAYU"
show_progress 1.34 150;
ui_print "*===============================================*"
ui_print "*   Welcome to Windows Installation on .......  *"
ui_print "*        Version: WinInstaller_......_.....     *"
ui_print "*        Date   : 17-Feb-2025                   *"
ui_print "*        Made by: Kumar_Jy                      *"
ui_print "*  Help and suggestions: ArKT, Sog, Andre_grams *"
ui_print "*Drivers & UEFI: Project-Aloha,.....,.......,...*"
ui_print "*===============================================*"
ui_print "*           Verifying Partition Size            *"
ui_print "*           Verifying Partition Size            *"
round() { echo $(awk "BEGIN {print int($1 + 0.5)}") }
if [ -e $path/win ] && [ -e $path/esp ]; then
    WIN_SIZE=$(round $(blockdev --getsize64 $path/win) / (1000 * 1000 * 1000))
    ESP_SIZE=$(round $(blockdev --getsize64 $path/esp) / (1000 * 1000))
    USERDATA_SIZE=$(round $(blockdev --getsize64 $path/userdata) / (1000 * 1000 * 1000))
    if [ "$WIN_SIZE" -ge 30 ] && [ "$ESP_SIZE" -ge 350 ]; then
        ui_print "USERDATA_SIZE: ${USERDATA_SIZE}GB"
        ui_print "WIN_SIZE: ${WIN_SIZE}GB"
        ui_print "ESP_SIZE: ${ESP_SIZE}MB"
    else
        ui_print "At least 30GB for WIN and 350MB for ESP required."
        exit 1
    fi
else
    ui_print "Required partitions (WIN or ESP) missing."
    exit 1
fi
ui_print "*-----------------------------------------------*"
ui_print "*            Checking Battery Status            *"
battery_percentage=$(cat /sys/class/power_supply/battery/capacity)

if [ "$battery_percentage" -le 50 ]; then
    ui_print "Battery is below 50%, exiting..."
    exit 1
else
    ui_print "Battery percentage is sufficient: $battery_percentage%"
fi
ui_print "*-----------------------------------------------*"
ui_print "*                  Fixing GPT                   *"
mkdir -p/tmp
GDISK_BINARY="/tmp/gdisk"

setup_gdisk() {
    package_extract_file "gdisk" "$GDISK_BINARY"
    chmod 0777 "$GDISK_BINARY"
}

run_gdisk() {
    local DEVICE=$1
    "$GDISK_BINARY" "$DEVICE" <<EOF
x
j

k

w
Y
EOF
}

setup_gdisk

for i in a b c d e f; do
    DEVICE="/dev/block/sd$i"
    run_gdisk "$DEVICE"
done
ui_print "*-----------------------------------------------*"
ui_print "*  Extracting boot and modem to /sdcard/backup  *"
mkdir -p /tmp/backup
for part in boot$(getprop ro.boot.slot_suffix) dtbo$(getprop ro.boot.slot_suffix) fsc fsg modemst1 modemst2 persist; do  
    dd if=$path/$part of=/tmp/backup/$part.img bs=8M
done
mkdir -p /{sdcard,external_sd/WOA,usbstorage/WOA,usb_otg/WOA}/backup
for dir in /sdcard /external_sd/WOA /usbstorage/WOA /usb_otg/WOA; do
    cp -r -n /tmp/backup "$dir"
done
ui_print "*-----------------------------------------------*"
ui_print "*   Checking if Windows is already installed    *"
ui_print "*-----------------------------------------------*"
mkdir -p /tmp/win
umount $path/win
mount.ntfs $path/win /tmp/win
if [ -f /tmp/win/Windows/explorer.exe ]; then
    ui_print "*          Windows is already installed         *"
    ui_print "*         Skipping format and copy steps        *"
    ui_print "*    and processing for Drivers Installation    *"
   ui_print "*-----------------------------------------------*"
   ui_print "*       Checking if Windows is Read-Only        *"
   ui_print "*-----------------------------------------------*" 
   if touch /tmp/win/testfile 2>/dev/null && rm /tmp/win/testfile; then  
     ui_print "*         Skipping format and copy steps        *"
     ui_print "*    and processing for Drivers Installation    *"
   else  
     umount $path/win
     ui_print "Error: Windows partition is read-only. Boot into Windows, reboot back to recovery, and try again, or open a terminal and type 'format' to format the WIN and ESP partitions." >&2
     exit 1
   fi
else
    ui_print "*        Windows is not already installed       *"
    ui_print "*       Proceeding with Windows Installation    *"
    ui_print "*-----------------------------------------------*"
    ui_print "*           Searching for Windows Image         *"
    WIN_IMAGE=""
    search_image() {
        local search_dir="$1"
        [ -n "$WIN_IMAGE" ] && return
        WIN_IMAGE=$(find "$search_dir" -type f \( -name "*.esd" -o -name "*.wim" \) ! -path "*/Android/*" | head -n 1)
        [ -n "$WIN_IMAGE" ] && ui_print "Windows Image found at $WIN_IMAGE"
    }
    # Search in predefined directories
    for dir in /sdcard/Download /external_sd/WOA /usbstorage/WOA /usb_otg/WOA; do
        search_image "$dir" && [ -n "$WIN_IMAGE" ] && break
    done
    # If not found, search recursively
    [ -z "$WIN_IMAGE" ] && for dir in /sdcard /external_sd /usbstorage /usb_otg; do
        [ -d "$dir" ] && search_image "$dir" && [ -n "$WIN_IMAGE" ] && break
    done
    # Print error message if no Windows image found
    if [ -z "$WIN_IMAGE" ]; then
        ui_print "No ESD/WIM files found. Ensure file exists."
        exit 1
    fi

    ui_print "*-----------------------------------------------*"
    ui_print "*           Verifying Windows Edition           *"
    WINDOWS_EDITIONS=("Windows 11 Pro" "Windows 11 IoT Enterprise LTSC" "Windows 11 Enterprise" "Windows 11 Home" "Windows 10 Pro" "Windows 10 Home")
	mkdir -p /tmp
    package_extract_file "wimlib-imagex" "/tmp/wimlib-imagex"
    chmod 0777 /tmp/wimlib-imagex
    /tmp/wimlib-imagex info "$WIN_IMAGE" > /tmp/wim_info.txt
    
    for EDITION in "${WINDOWS_EDITIONS[@]}"; do
        INDEX=$(grep -B 1 "$EDITION" /tmp/wim_info.txt | awk '/Index/ {print $2; exit}')
        if [[ -n "$INDEX" ]]; then
            SELECTED_INDEX="$INDEX"
            SELECTED_EDITION="$EDITION"
            ui_print "* $SELECTED_EDITION found at Index No $SELECTED_INDEX *" 
            break
        fi
    done

    ui_print "*-----------------------------------------------*"
    ui_print " Applying $SELECTED_EDITION using Wimlib-Imagex....."
    umount $path/win
    mkfs.ntfs -f $path/win -L $WINNAME
    /tmp/wimlib-imagex apply "$WIN_IMAGE" "$SELECTED_INDEX" $path/win
fi

mount.ntfs $path/win /tmp/win
if [ -f /tmp/win/Windows/explorer.exe ]; then
    ui_print "*                                               *"
else
    ui_print " Wimlib-imagex failed to apply $SELECTED_EDITION "
    ui_print " Your downloaded ESD/WIM image may be corrupted..."
    ui_print " Press and hold the power button to force reboot and check the ESD/WIM image."
    umount $path/win
    exit 1
fi

ui_print "*-----------------------------------------------*"
ui_print "*          Extracting installation files        *"
package_extract_folder "installer" "/tmp/win"
package_extract_folder "Toolbox" "/tmp/win"
package_extract_file "woahelper.apk" "/sdcard/Download/woahelper.apk"
ui_print "*-----------------------------------------------*"
ui_print "*               Flashing UEFI image             *"
rm /sdcard/UEFI/*.img
mkdir -p /sdcard/UEFI
dd if=/tmp/win/installer/uefi.img of=/sdcard/UEFI/uefi.img bs=8M
dd if=/sdcard/backup/boot$(getprop ro.boot.slot_suffix).img of=/tmp/win/boot.img bs=64M
dd if=/tmp/win/installer/pe.img of=$path/esp bs=8M
dd if=/tmp/win/installer/uefi.img of=$path/boot$(getprop ro.boot.slot_suffix) bs=8M
umount $path/{esp,win,cache}
sleep 1
ui_print "*===============================================*"
ui_print "*   Flashing Completed, Now reboot to system    *"
ui_print "*                                               *"
ui_print "*     Installation will start automatically     *"
ui_print "*                                               *"
ui_print "*      If it fails, Don't Flash it again        *"
ui_print "*                                               *"
ui_print "*    ask for help on Telegram: @wininstaller    *"
ui_print "*                                               *"
ui_print "*   Thanks to all WOA Developers & Maintainers  *"
ui_print "*===============================================*"
exit
