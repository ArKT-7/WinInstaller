#!/sbin/bash
#
# Copyright (C) 2025-26 https://github.com/Kumar-jy, https://github.com/ArKT-7
#
# Made for Windows Installation on WOA Devices 
#

# ================================ Configurations ================================
# TO-DO: all configuration values will be moved to a separate file
#       like in a main directory (wininstaller.conf), This will allow to modify settings safely
#       without touching the core script, making it easier to use for different devices

DEVICE_CODE="nabu"  # Device codename (ensure this matches your device)
BASE_PATH="/dev/block/by-name"  # Base path for named partition symlinks
WIN_PATH="$BASE_PATH/win"  # Path to the Windows partition block
WIN_MIN_SIZE=30  # Minimum required size for Windows partition (in GB)
ESP_PATH="$BASE_PATH/esp"  # Path to the EFI System Partition (ESP) block
ESP_MIN_SIZE=349  # Minimum required size for ESP partition (in MB)
CURRENT_BATTERY=$(cat /sys/class/power_supply/battery/capacity)  # Read current battery percentage
REQUIRED_BATTERY=50  # Minimum battery percentage required to proceed with the installation
PARTITION_BACKUP="boot dtbo vendor_boot fsc fsg modemst1 modemst2 persist"  # Partitions to back up, automatically handles A/B and non-A/B devices
WIN_PART_NAME="WINNABU"  # Label/name for the Windows partition to used during formatting

WINDOWS_EDITIONS=(
  "Windows 11 Pro"
  "Windows 11 IoT Enterprise LTSC"
  "Windows 11 Enterprise"
  "Windows 11 Home"
  "Windows 10 Pro"
  "Windows 10 Home"
)  # Priority-ordered list of supported Windows editions. The script checks each name from top to bottom and selects the first match found.

CHAR_WIDTH=49  # Maximum no. of characters per line for formatted output, char exceeding this will wrap automatically to next line
BANNER_EXIT="*---------------------Error!----------------------*"  # Banner to display on exit/abort
DEVICE_NAME="Xiaomi Pad 5"  # Name of the device
WI_VERSION="WinInstaller_Nabu_R8.2.5"  # Version-device for the Wininstaller
BUID_DATE="09-May-2025"  # Build date of the installer

# ======================= UI Prints / Functions / Execution ========================
# NOTE: 95% of code moved to update-binary functions for modularity/no need changes
# TO-DO: Add multi-language support for the print.
#       Will implement this after figuring out proper handling of volume key input
#       along with a timeout mechanism for user selections

print_line = # Prints a banner line using CHAR_WIDTH length of '-' (or custom character), wrapped with '*' on both ends
print_centered "Welcome to Windows Installation on $DEVICE_NAME"
print_centered "Version: $WI_VERSION"
print_centered "Build Date: $BUID_DATE"
print_centered "Made by: Kumar_Jy & ArKT"
print_centered "Help and suggestions by: Sog, Andre_grams"
print_centered "Drivers & UEFI: Project-Aloha,map220v,remtrik.."
print_line =
verify_device
print_centered "Verifying required Partitions"
verify_part
print_line # Prints a banner line using CHAR_WIDTH length of '-' (or custom character), wrapped with '*' on both ends
print_centered "Checking Battery Status"
if verify_battery; then
print_centered "Battery percentage is sufficient: $CURRENT_BATTERY%"
else
   abort "Battery is below $REQUIRED_BATTERY%, exiting..."
fi
print_line
print_centered "Fixing GPT"
aio_progress 0.5 10   # start progress from 0% to 50% in 10 seconds
run_gptfix
print_line
print_centered "Extracting boot and modem to /sdcard/backup"
backup_partitions $PARTITION_BACKUP
print_line
print_centered "Checking if Windows is already installed"
print_line
aio_progress 0.5 0    # instantly moves progress back to 5% (for reset or rewind)
aio_progress 0.9 80   # moves progress from 5% to 90% in 80 seconds
if is_windows_installed; then
print_centered "Windows is already installed"
# TO-DO: Add support for using volume buttons to choose between:
#       1) Reinstall with Windows partition formatting
#       2) Continue without formatting
# Challenge: Need to implement a timeout mechanism that works alongside
#            volume key detection without causing input conflicts or delays
if is_partition_rw; then
print_centered "Skipping format and copy steps"
print_centered "and processing for Drivers Installation"
else
print_exit
print_centered "Error: Partition is Read-Only"
nl_print_centered "Goto Windows then reboot to Android and try again"
umount "$WIN_PATH"
exit 1
fi
else
print_centered "Windows is not already installed"
print_centered "Proceeding with Windows Installation"
print_line
print_centered "Searching for Windows Image"
win_esd_search
print_line
print_centered "Verifying Windows Edition"
find_index
print_line
print_centered "Installing $SELECTED_EDITION...."
format_win
"$UPD_TEMP_FOLDER/wimlib-imagex" apply "$WIN_IMAGE" "$SELECTED_INDEX" "$WIN_PATH"
fi
if ! is_windows_installed; then
print_exit
print_centered "$SELECTED_EDITION Fail to install "
print_centered "ESD/WIM file may be corrupted..."
nl_print_centered "Reboot to Android and check the ESD/WIM file."
umount "$WIN_PATH"
exit 1
fi
# Not sure if I'll make any improvements/modular here, but may be as of now currently doesn't seem necessary
# Already handled non-A/B device support in a one-liner
aio_progress 0.5 0    # instantly moves progress back to 5% (for reset or rewind)
aio_progress 0.95 50  # moves progress from 50% to 95% in 50 seconds
print_line
print_centered "Extracting Installation File";
package_extract_folder "installer" "$WIN_MOUNT_FOLDER"
package_extract_folder "ToolBox" "$WIN_MOUNT_FOLDER"
package_extract_file "woahelper.apk" "/sdcard/woahelper.apk"
print_line
print_centered "Flashing UEFI image"
rm /sdcard/UEFI/*.img
mkdir -p /sdcard/UEFI
dd if="$WIN_MOUNT_FOLDER/installer/uefi.img" of="/sdcard/UEFI/uefi.img" bs=1M || { abort "Error copying uefi.img"; }
dd if="/sdcard/backup/boot$(getprop ro.boot.slot_suffix).img" of="$WIN_MOUNT_FOLDER/boot.img" bs=1M 2>/dev/null || dd if="/sdcard/backup/boot.img" of="$WIN_MOUNT_FOLDER/boot.img" bs=1M || { abort "Error copying boot.img in Windows"; }
dd if="$WIN_MOUNT_FOLDER/installer/pe.img" of="$BASE_PATH/esp" bs=1M || { abort "Error flashingh WinPE.img"; }
dd if="$WIN_MOUNT_FOLDER/installer/uefi.img" of="$BASE_PATH/boot$(getprop ro.boot.slot_suffix)" bs=1M 2>/dev/null || dd if="$WIN_MOUNT_FOLDER/installer/uefi.img" of="$BASE_PATH/boot" bs=1M || { abort "Error flashing uefi on boot partition"; }
umount "$WIN_PATH" "$ESP_PATH"
sleep 1
print_line =
print_centered "Flashing Completed, Now reboot to system"
print_centered "Installation will start automatically"
print_line =
print_centered "If it fails, Don't Flash it again"
print_centered "ask for help on Telegram: @wininstaller"
print_centered "Thanks to all WOA Developers & Maintainers"
print_line =
options=("Option 1: Reboot device" "Option 2: Exit")
navigate_menu "${options[@]}"
case "$selection" in
  0)
    ui_print "rebooting now!"
    sleep 1
	reboot
    ;;
  1)
    ui_print " "
    exit
    ;;
esac