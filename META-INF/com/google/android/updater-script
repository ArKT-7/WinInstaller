#!/sbin/bash
#
# Copyright (C) 2023-24 https://github.com/Kumar-Jy
#
# Made for WINDOWS Installation on Xiaomi Pad 5 (Nabu) 
#
if [ "$(getprop ro.product.device)" != "nabu" ]; then 
ui_print "This script is only for NABU devices."
ui_print "Your device is $(getprop ro.product.device)." 
exit 1
fi

show_progress 1.34 125;
ui_print "================================================*"
ui_print "* Welcome to Windows Installation on $(getprop ro.product.model)   *"
ui_print "*         This Script is only for $(getprop ro.product.device)          *"
ui_print "*      Made by Kumar_Jy and Tweaks by ArKT      *"
ui_print "================================================*"
ui_print "*                  Fixing GPT                   *"
GDISK_BINARY="/tmp/gdisk"

setup_gdisk() {
    package_extract_file "gdisk" "$GDISK_BINARY"
    chmod 0777 "$GDISK_BINARY"
}

run_gdisk() {
    local DEVICE=$1
    "$GDISK_BINARY" "$DEVICE" <<EOF
x
j

k

w
Y
EOF
}

setup_gdisk

for i in a b c d e f; do
    DEVICE="/dev/block/sd$i"
    run_gdisk "$DEVICE"
done
ui_print "*-----------------------------------------------*"
ui_print "*  extracting boot and modem to /sdcard/backup  *"
umount /dev/block/by-name/cust
mke2fs -t ext2 /dev/block/by-name/cust
mount /dev/block/by-name/cust /cust
mkdir -p /cust/backup
for part in boot$(getprop ro.boot.slot_suffix) dtbo$(getprop ro.boot.slot_suffix) fsc fsg modemst1 modemst2; do  
  dd if=/dev/block/by-name/$part of=/cust/backup/$part.img bs=8M
done
mkdir -p /{sdcard,external_sd/WOA,usbstorage/WOA,usb_otg/WOA}/backup
for dir in /sdcard /external_sd/WOA /usbstorage/WOA /usb_otg/WOA; do
    cp -r -n /cust/backup "$dir"
done
ui_print "*-----------------------------------------------*"
ui_print "*   Checking if Windows is already installed    *"
mkdir -p /tmp/win
umount $part_win
mount.ntfs $part_win /tmp/win
if [ -f /tmp/win/Windows/explorer.exe ]; then
    ui_print "*           Windows is already installed.       *"
	ui_print "*          Skipping format and copy steps.      *"
else
	ui_print "*-----------------------------------------------*"
	ui_print "*             Windows is not installed          *"
	ui_print "*-----------------------------------------------*"
    umount $part_win
    mkfs.ntfs -f $part_win -L WINABU
	
	package_extract_file "wimlib-imagex" "/tmp/wimlib-imagex"
    chmod 0777 /tmp/wimlib-imagex
    /tmp/wimlib-imagex info "$WIN_IMAGE" > /tmp/wim_info.txt
	for EDITION in "${WINDOWS_EDITIONS[@]}"; do
		INDEX=$(grep -B 1 "$EDITION" /tmp/wim_info.txt | awk '/Index/ {print $2; exit}')
		if [[ -n "$INDEX" ]]; then
			SELECTED_INDEX="$INDEX"
			SELECTED_EDITION="$EDITION"
			break
			fi
done
	
	ui_print "* Applying Index No $SELECTED_INDEX for $SELECTED_EDITION using Wimlib*"

	/tmp/wimlib-imagex apply "$WIN_IMAGE" "$SELECTED_INDEX" "$part_win"
	
	ui_print "*-----------------------------------------------*"
	ui_print "* $SELECTED_EDITION applied Successfully from $WIN_IMAGE *"
fi

mount.ntfs $part_win /tmp/win
if [ -f /tmp/win/Windows/explorer.exe ]; then
    ui_print "                                                *"
else
    ui_print "*-----------------------------------------------*"
    ui_print "*         Unmount and format partitions         *"
    umount $part_win
    mkfs.ntfs -f $part_win -L WINNABU
    ui_print "*-----------------------------------------------*"
    ui_print "*              Mounting partitions              *"
    mkdir -p /tmp/win
    mount.ntfs $part_win /tmp/win
    ui_print "*-----------------------------------------------*"
    ui_print "*              Copying Windows Image            *"
    mkdir -p /tmp/win/installer/Driver
	if [[ "$WIN_IMAGE" == *.esd ]]; then
		copy_with_progress "$WIN_IMAGE" /tmp/win/installer/install.esd
		ui_print "ESD file copied from $WIN_IMAGE to /tmp/win/installer/install.esd"
	elif [[ "$WIN_IMAGE" == *.wim ]]; then
		copy_with_progress "$WIN_IMAGE" /tmp/win/installer/install.wim
		ui_print "WIM file copied from $WIN_IMAGE to /tmp/win/installer/install.wim"
	fi
fi
ui_print "*-----------------------------------------------*"
ui_print "*          Extracting installation files        *"
mkdir -p /tmp/win/installer/Driver
for file in Driver.zip pe.img uefi.img install.bat sta.exe; do  
  package_extract_file "$file" "/tmp/win/installer/$file"
done
package_extract_file "Toolbox.zip" "/tmp/win/Toolbox.zip"
package_extract_file "woahelper30.apk" "/sdcard/Download/woahelper30.apk"
unzip /tmp/win/installer/Driver.zip -d /tmp/win/installer/Driver
# mv /tmp/win/installer/Driver/definitions/Desktop/ARM64/Internal/*.xml /tmp/win/installer/Driver/definitions/Desktop/ARM64/Internal/sog.xml
ui_print "*-----------------------------------------------*"
ui_print "*               Flashing UEFI image             *"
rm /sdcard/UEFI/*.img
mkdir -p /sdcard/UEFI
dd if=/tmp/win/installer/uefi.img of=/sdcard/UEFI/uefi.img bs=8M
dd if=/sdcard/backup/boot$(getprop ro.boot.slot_suffix).img of=/tmp/win/boot.img bs=64M
dd if=/tmp/win/installer/pe.img of=$part_esp bs=8M
dd if=/tmp/win/installer/uefi.img of=/dev/block/by-name/boot$(getprop ro.boot.slot_suffix) bs=8M
umount /dev/block/by-name/{esp,win,cust}
sleep 1
ui_print "================================================*"
ui_print "*              Flashing Completed               *"
ui_print "*                                               *"
ui_print "*        Now reboot to start Installation       *"
ui_print "*                                               *"
ui_print "*     Installation will start automatically     *"
ui_print "*                                               *"
ui_print "*      If it fails, Don't Flash it again        *"
ui_print "*                                               *"
ui_print "*    ask for help on Telegram: @wininstaller    *"
ui_print "*                                               *"
ui_print "================================================*"
exit
