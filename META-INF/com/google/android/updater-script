#!/sbin/bash
#
# Copyright (C) 2025-26 https://github.com/Kumar-jy, https://github.com/ArKT-7
#
# Made for Windows Installation on WOA Devices 
#

#================================Configrations===============================

DEVICE_CODE="nabu" # Check and verify device with its codename
BASE_PATH="/dev/block/by-name"  # Base path to named partition symlinks
WIN_PATH="$BASE_PATH/win"  # Windows partition block name
WIN_MIN_SIZE=30  # in GB
ESP_PATH="$BASE_PATH/esp"  # ESP partition block name
ESP_MIN_SIZE=349  # in MB
CURRENT_BATTERY=$(cat /sys/class/power_supply/battery/capacity)
REQUIRED_BATTERY=50  # Minimum required battery percentage to proceed
PARTITION_BACKUP="boot dtbo vendor_boot fsc fsg modemst1 modemst2 persist" # set partiiton to backup auto handgle A/B non A/B device
WIN_PART_NAME="WINNABU"  # Partiton name for format
WINDOWS_EDITIONS=(
"Windows 11 Pro"
"Windows 11 IoT Enterprise LTSC"
"Windows 11 Enterprise"
"Windows 11 Home"
"Windows 10 Pro"
"Windows 10 Home"
)
CHAR_WIDTH=49 #for max character in one line, if exceed then it auto wrapped to next line
BANNER_EXIT="*---------------------Error!----------------------*"
#=======================UI-Prints=funtions-executions========================
print_line =
print_centered "Welcome to Windows Installation on Xiaomi Pad 5"
print_centered "Version: WinInstaller_Nabu_R8.2.5"s
print_centered "Build Date: 09-May-2025"
print_centered "Made by: Kumar_Jy & ArKT"
print_centered "Help and suggestions by: Sog, Andre_grams"
print_centered "Drivers & UEFI: Project-Aloha,map220v,remtrik.."
print_line =
verify_device "$DEVICE_CODE"
print_centered "Verifying required Partitions"
verify_part
print_line
print_centered "Checking Battery Status"
if verify_battery; then
print_centered "Battery percentage is sufficient: $CURRENT_BATTERY%"
else
   abort "Battery is below $REQUIRED_BATTERY%, exiting..."
fi
print_line
print_centered "Fixing GPT"
aio_progress 0.5 10
run_gptfix
print_line
print_centered "Extracting boot and modem to /sdcard/backup"
backup_partitions $PARTITION_BACKUP
print_line
print_centered "Checking if Windows is already installed"
print_line
aio_progress 0.05 0
aio_progress 0.9 80
if is_windows_installed; then
print_centered "Windows is already installed"
#to-do add volume button selection to choose re-install again with windows format or continue
if is_partition_rw; then
print_centered "Skipping format and copy steps"
print_centered "and processing for Drivers Installation"
else
print_exit
print_centered "Error: Partition is Read-Only"
nl_print_centered "Goto Windows then reboot to Android and try again"
umount "$WIN_PATH"
exit 1
fi
else
print_centered "Windows is not already installed"
print_centered "Proceeding with Windows Installation"
print_line
print_centered "Searching for Windows Image"
win_esd_search
print_line
print_centered "Verifying Windows Edition"
find_index
print_line
print_centered "Installing $SELECTED_EDITION...."
format_win
"$UPD_TEMP_FOLDER/wimlib-imagex" apply "$WIN_IMAGE" "$SELECTED_INDEX" "$WIN_PATH"
fi
if ! is_windows_installed; then
print_exit
print_centered "$SELECTED_EDITION Fail to install "
print_centered "ESD/WIM file may be corrupted..."
nl_print_centered "Reboot to Android and check the ESD/WIM file."
umount "$WIN_PATH"
exit 1
fi
aio_progress 0.5 0
#After this idk if i'll do modular, but not need ig, idk also already added handle non A/B device in oneliner like before
aio_progress 0.95 50
print_line
print_centered "Extracting Installation File";
package_extract_folder "installer" "$WIN_MOUNT_FOLDER"
package_extract_folder "ToolBox" "$WIN_MOUNT_FOLDER"
package_extract_file "woahelper.apk" "/sdcard/woahelper.apk"
print_line
print_centered "Flashing UEFI image"
rm /sdcard/UEFI/*.img
mkdir -p /sdcard/UEFI
dd if="$WIN_MOUNT_FOLDER/installer/uefi.img" of="/sdcard/UEFI/uefi.img" bs=1M || { abort "Error copying uefi.img"; }
dd if="/sdcard/backup/boot$(getprop ro.boot.slot_suffix).img" of="$WIN_MOUNT_FOLDER/boot.img" bs=1M 2>/dev/null || dd if="/sdcard/backup/boot.img" of="$WIN_MOUNT_FOLDER/boot.img" bs=1M || { abort "Error copying boot.img in Windows"; }
dd if="$WIN_MOUNT_FOLDER/installer/pe.img" of="$BASE_PATH/esp" bs=1M || { abort "Error flashingh WinPE.img"; }
dd if="$WIN_MOUNT_FOLDER/installer/uefi.img" of="$BASE_PATH/boot$(getprop ro.boot.slot_suffix)" bs=1M 2>/dev/null || dd if="$WIN_MOUNT_FOLDER/installer/uefi.img" of="$BASE_PATH/boot" bs=1M || { abort "Error flashing uefi on boot partition"; }
umount "$WIN_PATH" "$ESP_PATH"
sleep 1
print_line =
print_centered "Flashing Completed, Now reboot to system"
print_centered "Installation will start automatically"
print_line =
print_centered "If it fails, Don't Flash it again"
print_centered "ask for help on Telegram: @wininstaller"
print_centered "Thanks to all WOA Developers & Maintainers"
print_line =
options=("Option 1: Reboot device" "Option 2: Exit")
navigate_menu "${options[@]}"
case "$selection" in
  0)
    ui_print "rebooting now!"
    sleep 1
	reboot
    ;;
  1)
    ui_print " "
    exit
    ;;
esac
